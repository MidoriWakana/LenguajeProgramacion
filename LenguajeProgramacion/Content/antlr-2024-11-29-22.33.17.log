2024-11-29 22:33:17:089 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Lenguaje (RULES (RULE program (BLOCK (ALT (* (BLOCK (ALT line))) EOF))) (RULE line (BLOCK (ALT statement) (ALT ifBlock) (ALT whileBlock))) (RULE statement (BLOCK (ALT (BLOCK (ALT assignment) (ALT functionCall)) ';'))) (RULE ifBlock (BLOCK (ALT 'if' expression block (BLOCK (ALT 'else' elseifBlock))))) (RULE elseifBlock (BLOCK (ALT block) (ALT ifBlock))) (RULE whileBlock (BLOCK (ALT WHILE expression block (BLOCK (ALT 'else' elseifBlock))))) (RULE WHILE (BLOCK (ALT 'while') (ALT 'until'))) (RULE assignment (BLOCK (ALT IDENTIFIER '=' expression))) (RULE functionCall (BLOCK (ALT IDENTIFIER '(' (? (BLOCK (ALT expression (* (BLOCK (ALT ',' expression)))))) ')'))) (RULE expression (BLOCK (ALT constant) (ALT IDENTIFIER) (ALT functionCall) (ALT '(' expression ')') (ALT '!' expression) (ALT expression multOp expression) (ALT expression addOp expression) (ALT expression compareOp expression) (ALT expression boolOp expression))) (RULE multOp (BLOCK (ALT '*') (ALT '/'))) (RULE addOp (BLOCK (ALT '+') (ALT '-'))) (RULE compareOp (BLOCK (ALT '==') (ALT '!=') (ALT '>') (ALT '<') (ALT '>=') (ALT '<='))) (RULE boolOp (BLOCK (ALT BOOL_OPERATOR))) (RULE BOOL_OPERATOR (BLOCK (ALT 'and') (ALT 'or') (ALT 'xor'))) (RULE constant (BLOCK (ALT INTEGER) (ALT FLOAT) (ALT STRING) (ALT BOOL) (ALT NULL))) (RULE INTEGER (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9])))))) (RULE STRING (BLOCK (ALT (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET '"'))))) '"'))) (ALT (BLOCK (ALT '\'' (* (BLOCK (ALT (~ (SET '\''))))) '\''))))) (RULE BOOL (BLOCK (ALT 'true') (ALT 'false'))) (RULE NULL (BLOCK (ALT 'null'))) (RULE block (BLOCK (ALT '{' (* (BLOCK (ALT line))) '}'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE IDENTIFIER (BLOCK (ALT [a-zA-Z0-9_] (* (BLOCK (ALT [a-zA-Z0-9_]))))))))
2024-11-29 22:33:17:103 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Lenguaje (RULES (RULE program (BLOCK (ALT (* (BLOCK (ALT line))) EOF))) (RULE line (BLOCK (ALT statement) (ALT ifBlock) (ALT whileBlock))) (RULE statement (BLOCK (ALT (BLOCK (ALT assignment) (ALT functionCall)) ';'))) (RULE ifBlock (BLOCK (ALT 'if' expression block (BLOCK (ALT 'else' elseifBlock))))) (RULE elseifBlock (BLOCK (ALT block) (ALT ifBlock))) (RULE whileBlock (BLOCK (ALT WHILE expression block (BLOCK (ALT 'else' elseifBlock))))) (RULE WHILE (BLOCK (ALT 'while') (ALT 'until'))) (RULE assignment (BLOCK (ALT IDENTIFIER '=' expression))) (RULE functionCall (BLOCK (ALT IDENTIFIER '(' (? (BLOCK (ALT expression (* (BLOCK (ALT ',' expression)))))) ')'))) (RULE expression (BLOCK (ALT constant) (ALT IDENTIFIER) (ALT functionCall) (ALT '(' expression ')') (ALT '!' expression) (ALT expression multOp expression) (ALT expression addOp expression) (ALT expression compareOp expression) (ALT expression boolOp expression))) (RULE multOp (BLOCK (ALT (SET '*' '/')))) (RULE addOp (BLOCK (ALT (SET '+' '-')))) (RULE compareOp (BLOCK (ALT (SET '==' '!=' '>' '<' '>=' '<=')))) (RULE boolOp (BLOCK (ALT BOOL_OPERATOR))) (RULE BOOL_OPERATOR (BLOCK (ALT 'and') (ALT 'or') (ALT 'xor'))) (RULE constant (BLOCK (ALT (SET INTEGER FLOAT STRING BOOL NULL)))) (RULE INTEGER (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9])))))) (RULE STRING (BLOCK (ALT (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET '"'))))) '"'))) (ALT (BLOCK (ALT '\'' (* (BLOCK (ALT (~ (SET '\''))))) '\''))))) (RULE BOOL (BLOCK (ALT 'true') (ALT 'false'))) (RULE NULL (BLOCK (ALT 'null'))) (RULE block (BLOCK (ALT '{' (* (BLOCK (ALT line))) '}'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE IDENTIFIER (BLOCK (ALT [a-zA-Z0-9_] (* (BLOCK (ALT [a-zA-Z0-9_]))))))))
2024-11-29 22:33:17:117 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Lenguaje (RULES (RULE program (BLOCK (ALT (* (BLOCK (ALT line))) EOF))) (RULE line (BLOCK (ALT statement) (ALT ifBlock) (ALT whileBlock))) (RULE statement (BLOCK (ALT (BLOCK (ALT assignment) (ALT functionCall)) ';'))) (RULE ifBlock (BLOCK (ALT 'if' expression block (BLOCK (ALT 'else' elseifBlock))))) (RULE elseifBlock (BLOCK (ALT block) (ALT ifBlock))) (RULE whileBlock (BLOCK (ALT WHILE expression block (BLOCK (ALT 'else' elseifBlock))))) (RULE assignment (BLOCK (ALT IDENTIFIER '=' expression))) (RULE functionCall (BLOCK (ALT IDENTIFIER '(' (? (BLOCK (ALT expression (* (BLOCK (ALT ',' expression)))))) ')'))) (RULE expression (BLOCK (ALT constant) (ALT IDENTIFIER) (ALT functionCall) (ALT '(' expression ')') (ALT '!' expression) (ALT expression multOp expression) (ALT expression addOp expression) (ALT expression compareOp expression) (ALT expression boolOp expression))) (RULE multOp (BLOCK (ALT (SET '*' '/')))) (RULE addOp (BLOCK (ALT (SET '+' '-')))) (RULE compareOp (BLOCK (ALT (SET '==' '!=' '>' '<' '>=' '<=')))) (RULE boolOp (BLOCK (ALT BOOL_OPERATOR))) (RULE constant (BLOCK (ALT (SET INTEGER FLOAT STRING BOOL NULL)))) (RULE block (BLOCK (ALT '{' (* (BLOCK (ALT line))) '}')))))
2024-11-29 22:33:17:117 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR LenguajeLexer (RULES (RULE T__0 (BLOCK (ALT ';'))) (RULE T__1 (BLOCK (ALT 'if'))) (RULE T__2 (BLOCK (ALT 'else'))) (RULE T__3 (BLOCK (ALT '='))) (RULE T__4 (BLOCK (ALT '('))) (RULE T__5 (BLOCK (ALT ','))) (RULE T__6 (BLOCK (ALT ')'))) (RULE T__7 (BLOCK (ALT '!'))) (RULE T__8 (BLOCK (ALT '*'))) (RULE T__9 (BLOCK (ALT '/'))) (RULE T__10 (BLOCK (ALT '+'))) (RULE T__11 (BLOCK (ALT '-'))) (RULE T__12 (BLOCK (ALT '=='))) (RULE T__13 (BLOCK (ALT '!='))) (RULE T__14 (BLOCK (ALT '>'))) (RULE T__15 (BLOCK (ALT '<'))) (RULE T__16 (BLOCK (ALT '>='))) (RULE T__17 (BLOCK (ALT '<='))) (RULE T__18 (BLOCK (ALT '{'))) (RULE T__19 (BLOCK (ALT '}'))) (RULE WHILE (BLOCK (ALT 'while') (ALT 'until'))) (RULE BOOL_OPERATOR (BLOCK (ALT 'and') (ALT 'or') (ALT 'xor'))) (RULE INTEGER (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9])))))) (RULE STRING (BLOCK (ALT (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET '"'))))) '"'))) (ALT (BLOCK (ALT '\'' (* (BLOCK (ALT (~ (SET '\''))))) '\''))))) (RULE BOOL (BLOCK (ALT 'true') (ALT 'false'))) (RULE NULL (BLOCK (ALT 'null'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE IDENTIFIER (BLOCK (ALT [a-zA-Z0-9_] (* (BLOCK (ALT [a-zA-Z0-9_]))))))))
2024-11-29 22:33:17:230 left-recursion LogManager.java:25 expression
    :   ( {} constant<tokenIndex=128>                           
        | IDENTIFIER<tokenIndex=135>                         
        | functionCall<tokenIndex=142>                       
        | '('<tokenIndex=149> expression<tokenIndex=151> ')'<tokenIndex=153>                 
        | '!'<tokenIndex=160> expression<tokenIndex=162,p=5> 
        )
        (
          {precpred(_ctx, 4)}?<p=4> multOp<tokenIndex=171> expression<tokenIndex=173,p=5>
                  | {precpred(_ctx, 3)}?<p=3> addOp<tokenIndex=182> expression<tokenIndex=184,p=4>
                  | {precpred(_ctx, 2)}?<p=2> compareOp<tokenIndex=193> expression<tokenIndex=195,p=3>
                  | {precpred(_ctx, 1)}?<p=1> boolOp<tokenIndex=204> expression<tokenIndex=206,p=2>
        )*
    ;
2024-11-29 22:33:17:236 grammar LogManager.java:25 added: (RULE expression (BLOCK (ALT (BLOCK (ALT {} (constant (ELEMENT_OPTIONS (= tokenIndex 128)))) (ALT (IDENTIFIER (ELEMENT_OPTIONS (= tokenIndex 135)))) (ALT (functionCall (ELEMENT_OPTIONS (= tokenIndex 142)))) (ALT ('(' (ELEMENT_OPTIONS (= tokenIndex 149))) (expression (ELEMENT_OPTIONS (= tokenIndex 151))) (')' (ELEMENT_OPTIONS (= tokenIndex 153)))) (ALT ('!' (ELEMENT_OPTIONS (= tokenIndex 160))) (expression (ELEMENT_OPTIONS (= tokenIndex 162) (= p 5))))) (* (BLOCK (ALT ({precpred(_ctx, 4)}? (ELEMENT_OPTIONS (= p 4))) (multOp (ELEMENT_OPTIONS (= tokenIndex 171))) (expression (ELEMENT_OPTIONS (= tokenIndex 173) (= p 5)))) (ALT ({precpred(_ctx, 3)}? (ELEMENT_OPTIONS (= p 3))) (addOp (ELEMENT_OPTIONS (= tokenIndex 182))) (expression (ELEMENT_OPTIONS (= tokenIndex 184) (= p 4)))) (ALT ({precpred(_ctx, 2)}? (ELEMENT_OPTIONS (= p 2))) (compareOp (ELEMENT_OPTIONS (= tokenIndex 193))) (expression (ELEMENT_OPTIONS (= tokenIndex 195) (= p 3)))) (ALT ({precpred(_ctx, 1)}? (ELEMENT_OPTIONS (= p 1))) (boolOp (ELEMENT_OPTIONS (= tokenIndex 204))) (expression (ELEMENT_OPTIONS (= tokenIndex 206) (= p 2)))))))))
2024-11-29 22:33:17:236 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, T__17=18, T__18=19, T__19=20, WHILE=21, BOOL_OPERATOR=22, INTEGER=23, FLOAT=24, STRING=25, BOOL=26, NULL=27, WS=28, IDENTIFIER=29}
2024-11-29 22:33:17:236 semantics LogManager.java:25 strings={';'=1, 'if'=2, 'else'=3, '='=4, '('=5, ','=6, ')'=7, '!'=8, '*'=9, '/'=10, '+'=11, '-'=12, '=='=13, '!='=14, '>'=15, '<'=16, '>='=17, '<='=18, '{'=19, '}'=20, 'null'=27}
2024-11-29 22:33:17:243 LL1 LogManager.java:25 
DECISION 0 in rule program
2024-11-29 22:33:17:243 LL1 LogManager.java:25 look=[{2, 21, 29}, <EOF>]
2024-11-29 22:33:17:243 LL1 LogManager.java:25 LL(1)? true
2024-11-29 22:33:17:243 LL1 LogManager.java:25 
DECISION 1 in rule line
2024-11-29 22:33:17:243 LL1 LogManager.java:25 look=[29, 2, 21]
2024-11-29 22:33:17:243 LL1 LogManager.java:25 LL(1)? true
2024-11-29 22:33:17:243 LL1 LogManager.java:25 
DECISION 2 in rule statement
2024-11-29 22:33:17:243 LL1 LogManager.java:25 look=[29, 29]
2024-11-29 22:33:17:243 LL1 LogManager.java:25 LL(1)? false
2024-11-29 22:33:17:243 LL1 LogManager.java:25 
DECISION 3 in rule elseifBlock
2024-11-29 22:33:17:243 LL1 LogManager.java:25 look=[19, 2]
2024-11-29 22:33:17:243 LL1 LogManager.java:25 LL(1)? true
2024-11-29 22:33:17:244 LL1 LogManager.java:25 
DECISION 4 in rule functionCall
2024-11-29 22:33:17:244 LL1 LogManager.java:25 look=[6, 7]
2024-11-29 22:33:17:244 LL1 LogManager.java:25 LL(1)? true
2024-11-29 22:33:17:244 LL1 LogManager.java:25 
DECISION 5 in rule functionCall
2024-11-29 22:33:17:244 LL1 LogManager.java:25 look=[{5, 8, 23..27, 29}, 7]
2024-11-29 22:33:17:244 LL1 LogManager.java:25 LL(1)? true
2024-11-29 22:33:17:244 LL1 LogManager.java:25 
DECISION 6 in rule expression
2024-11-29 22:33:17:244 LL1 LogManager.java:25 look=[{23..27}, 29, 29, 5, 8]
2024-11-29 22:33:17:244 LL1 LogManager.java:25 LL(1)? false
2024-11-29 22:33:17:244 LL1 LogManager.java:25 
DECISION 7 in rule expression
2024-11-29 22:33:17:244 LL1 LogManager.java:25 look=[null, null, null, null]
2024-11-29 22:33:17:244 LL1 LogManager.java:25 LL(1)? false
2024-11-29 22:33:17:244 LL1 LogManager.java:25 
DECISION 8 in rule expression
2024-11-29 22:33:17:244 LL1 LogManager.java:25 look=[null, null]
2024-11-29 22:33:17:244 LL1 LogManager.java:25 LL(1)? false
2024-11-29 22:33:17:244 LL1 LogManager.java:25 
DECISION 9 in rule block
2024-11-29 22:33:17:244 LL1 LogManager.java:25 look=[{2, 21, 29}, 20]
2024-11-29 22:33:17:244 LL1 LogManager.java:25 LL(1)? true
2024-11-29 22:33:17:257 action-translator LogManager.java:25 translate 
2024-11-29 22:33:17:258 action-translator LogManager.java:25 translate precpred(_ctx, 4)
2024-11-29 22:33:17:258 action-translator LogManager.java:25 translate precpred(_ctx, 3)
2024-11-29 22:33:17:258 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2024-11-29 22:33:17:258 action-translator LogManager.java:25 translate precpred(_ctx, 1)
2024-11-29 22:33:17:258 action-translator LogManager.java:25 translate precpred(_ctx, 4)
2024-11-29 22:33:17:259 action-translator LogManager.java:25 translate precpred(_ctx, 3)
2024-11-29 22:33:17:259 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2024-11-29 22:33:17:259 action-translator LogManager.java:25 translate precpred(_ctx, 1)
