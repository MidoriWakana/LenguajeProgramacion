2024-12-04 14:25:59:038 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Lenguaje (RULES (RULE program (BLOCK (ALT (* (BLOCK (ALT line))) EOF))) (RULE line (BLOCK (ALT statement) (ALT ifBlock) (ALT whileBlock) (ALT forBlock))) (RULE statement (BLOCK (ALT (BLOCK (ALT assignment) (ALT matrixDeclaration) (ALT functionCall)) ';'))) (RULE ifBlock (BLOCK (ALT IF '(' expression ')' block (? (BLOCK (ALT elseifBlock) (ALT elseBlock)))))) (RULE IF (BLOCK (ALT 'si') (ALT 'Si') (ALT 'SI'))) (RULE ELSE (BLOCK (ALT 'entonces') (ALT 'Entonces') (ALT 'ENTONCES'))) (RULE elseifBlock (BLOCK (ALT ELSE IF '(' expression ')' block (? (BLOCK (ALT elseBlock)))))) (RULE elseBlock (BLOCK (ALT ELSE block (? (BLOCK (ALT elseBlock)))))) (RULE whileBlock (BLOCK (ALT WHILE '(' expression ')' block))) (RULE WHILE (BLOCK (ALT 'mientras') (ALT 'Mientras') (ALT 'MIENTRAS') (ALT 'hasta') (ALT 'Hasta') (ALT 'HASTA'))) (RULE forBlock (BLOCK (ALT FOR '(' assignment ';' (? (BLOCK (ALT expression))) ';' assignment ')' block))) (RULE FOR (BLOCK (ALT 'para') (ALT 'Para') (ALT 'PARA'))) (RULE matrixDeclaration (BLOCK (ALT IDENTIFIER '=' '[' row (* (BLOCK (ALT ',' row))) ']'))) (RULE row (BLOCK (ALT '[' expression (* (BLOCK (ALT ',' expression))) ']'))) (RULE indexAccess (BLOCK (ALT IDENTIFIER '[' expression ']' (? (BLOCK (ALT '[' expression ']')))))) (RULE assignment (BLOCK (ALT IDENTIFIER '=' expression))) (RULE functionCall (BLOCK (ALT IDENTIFIER '(' (? (BLOCK (ALT expression (* (BLOCK (ALT ',' expression)))))) ')'))) (RULE expression (BLOCK (ALT constant) (ALT IDENTIFIER) (ALT indexAccess) (ALT functionCall) (ALT '(' expression ')') (ALT '!' expression) (ALT expression powOp expression) (ALT expression sqrtOp expression) (ALT expression multOp expression) (ALT expression addOp expression) (ALT expression compareOp expression) (ALT expression boolOp expression))) (RULE powOp (BLOCK (ALT '^'))) (RULE sqrtOp (BLOCK (ALT 'raiz'))) (RULE multOp (BLOCK (ALT '*') (ALT '/'))) (RULE addOp (BLOCK (ALT '+') (ALT '-'))) (RULE compareOp (BLOCK (ALT '==') (ALT '!=') (ALT '>') (ALT '<') (ALT '>=') (ALT '<='))) (RULE boolOp (BLOCK (ALT BOOL_OPERATOR))) (RULE BOOL_OPERATOR (BLOCK (ALT 'and') (ALT 'or') (ALT 'xor'))) (RULE constant (BLOCK (ALT INTEGER) (ALT FLOAT) (ALT DOUBLE) (ALT STRING) (ALT BOOL) (ALT NULL))) (RULE INTEGER (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9])))))) (RULE DOUBLE (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9]))) (BLOCK (ALT 'e') (ALT 'E')) (? (BLOCK (ALT [+-]))) (+ (BLOCK (ALT [0-9])))))) (RULE STRING (BLOCK (ALT (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET '"'))))) '"'))) (ALT (BLOCK (ALT '\'' (* (BLOCK (ALT (~ (SET '\''))))) '\''))))) (RULE BOOL (BLOCK (ALT 'true') (ALT 'false'))) (RULE NULL (BLOCK (ALT 'null'))) (RULE block (BLOCK (ALT '{' (* (BLOCK (ALT line))) '}'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE IDENTIFIER (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z0-9_]))))))))
2024-12-04 14:25:59:055 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Lenguaje (RULES (RULE program (BLOCK (ALT (* (BLOCK (ALT line))) EOF))) (RULE line (BLOCK (ALT statement) (ALT ifBlock) (ALT whileBlock) (ALT forBlock))) (RULE statement (BLOCK (ALT (BLOCK (ALT assignment) (ALT matrixDeclaration) (ALT functionCall)) ';'))) (RULE ifBlock (BLOCK (ALT IF '(' expression ')' block (? (BLOCK (ALT elseifBlock) (ALT elseBlock)))))) (RULE IF (BLOCK (ALT 'si') (ALT 'Si') (ALT 'SI'))) (RULE ELSE (BLOCK (ALT 'entonces') (ALT 'Entonces') (ALT 'ENTONCES'))) (RULE elseifBlock (BLOCK (ALT ELSE IF '(' expression ')' block (? (BLOCK (ALT elseBlock)))))) (RULE elseBlock (BLOCK (ALT ELSE block (? (BLOCK (ALT elseBlock)))))) (RULE whileBlock (BLOCK (ALT WHILE '(' expression ')' block))) (RULE WHILE (BLOCK (ALT 'mientras') (ALT 'Mientras') (ALT 'MIENTRAS') (ALT 'hasta') (ALT 'Hasta') (ALT 'HASTA'))) (RULE forBlock (BLOCK (ALT FOR '(' assignment ';' (? (BLOCK (ALT expression))) ';' assignment ')' block))) (RULE FOR (BLOCK (ALT 'para') (ALT 'Para') (ALT 'PARA'))) (RULE matrixDeclaration (BLOCK (ALT IDENTIFIER '=' '[' row (* (BLOCK (ALT ',' row))) ']'))) (RULE row (BLOCK (ALT '[' expression (* (BLOCK (ALT ',' expression))) ']'))) (RULE indexAccess (BLOCK (ALT IDENTIFIER '[' expression ']' (? (BLOCK (ALT '[' expression ']')))))) (RULE assignment (BLOCK (ALT IDENTIFIER '=' expression))) (RULE functionCall (BLOCK (ALT IDENTIFIER '(' (? (BLOCK (ALT expression (* (BLOCK (ALT ',' expression)))))) ')'))) (RULE expression (BLOCK (ALT constant) (ALT IDENTIFIER) (ALT indexAccess) (ALT functionCall) (ALT '(' expression ')') (ALT '!' expression) (ALT expression powOp expression) (ALT expression sqrtOp expression) (ALT expression multOp expression) (ALT expression addOp expression) (ALT expression compareOp expression) (ALT expression boolOp expression))) (RULE powOp (BLOCK (ALT '^'))) (RULE sqrtOp (BLOCK (ALT 'raiz'))) (RULE multOp (BLOCK (ALT (SET '*' '/')))) (RULE addOp (BLOCK (ALT (SET '+' '-')))) (RULE compareOp (BLOCK (ALT (SET '==' '!=' '>' '<' '>=' '<=')))) (RULE boolOp (BLOCK (ALT BOOL_OPERATOR))) (RULE BOOL_OPERATOR (BLOCK (ALT 'and') (ALT 'or') (ALT 'xor'))) (RULE constant (BLOCK (ALT (SET INTEGER FLOAT DOUBLE STRING BOOL NULL)))) (RULE INTEGER (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9])))))) (RULE DOUBLE (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9]))) (SET 'e' 'E') (? (BLOCK (ALT [+-]))) (+ (BLOCK (ALT [0-9])))))) (RULE STRING (BLOCK (ALT (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET '"'))))) '"'))) (ALT (BLOCK (ALT '\'' (* (BLOCK (ALT (~ (SET '\''))))) '\''))))) (RULE BOOL (BLOCK (ALT 'true') (ALT 'false'))) (RULE NULL (BLOCK (ALT 'null'))) (RULE block (BLOCK (ALT '{' (* (BLOCK (ALT line))) '}'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE IDENTIFIER (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z0-9_]))))))))
2024-12-04 14:25:59:073 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Lenguaje (RULES (RULE program (BLOCK (ALT (* (BLOCK (ALT line))) EOF))) (RULE line (BLOCK (ALT statement) (ALT ifBlock) (ALT whileBlock) (ALT forBlock))) (RULE statement (BLOCK (ALT (BLOCK (ALT assignment) (ALT matrixDeclaration) (ALT functionCall)) ';'))) (RULE ifBlock (BLOCK (ALT IF '(' expression ')' block (? (BLOCK (ALT elseifBlock) (ALT elseBlock)))))) (RULE elseifBlock (BLOCK (ALT ELSE IF '(' expression ')' block (? (BLOCK (ALT elseBlock)))))) (RULE elseBlock (BLOCK (ALT ELSE block (? (BLOCK (ALT elseBlock)))))) (RULE whileBlock (BLOCK (ALT WHILE '(' expression ')' block))) (RULE forBlock (BLOCK (ALT FOR '(' assignment ';' (? (BLOCK (ALT expression))) ';' assignment ')' block))) (RULE matrixDeclaration (BLOCK (ALT IDENTIFIER '=' '[' row (* (BLOCK (ALT ',' row))) ']'))) (RULE row (BLOCK (ALT '[' expression (* (BLOCK (ALT ',' expression))) ']'))) (RULE indexAccess (BLOCK (ALT IDENTIFIER '[' expression ']' (? (BLOCK (ALT '[' expression ']')))))) (RULE assignment (BLOCK (ALT IDENTIFIER '=' expression))) (RULE functionCall (BLOCK (ALT IDENTIFIER '(' (? (BLOCK (ALT expression (* (BLOCK (ALT ',' expression)))))) ')'))) (RULE expression (BLOCK (ALT constant) (ALT IDENTIFIER) (ALT indexAccess) (ALT functionCall) (ALT '(' expression ')') (ALT '!' expression) (ALT expression powOp expression) (ALT expression sqrtOp expression) (ALT expression multOp expression) (ALT expression addOp expression) (ALT expression compareOp expression) (ALT expression boolOp expression))) (RULE powOp (BLOCK (ALT '^'))) (RULE sqrtOp (BLOCK (ALT 'raiz'))) (RULE multOp (BLOCK (ALT (SET '*' '/')))) (RULE addOp (BLOCK (ALT (SET '+' '-')))) (RULE compareOp (BLOCK (ALT (SET '==' '!=' '>' '<' '>=' '<=')))) (RULE boolOp (BLOCK (ALT BOOL_OPERATOR))) (RULE constant (BLOCK (ALT (SET INTEGER FLOAT DOUBLE STRING BOOL NULL)))) (RULE block (BLOCK (ALT '{' (* (BLOCK (ALT line))) '}')))))
2024-12-04 14:25:59:073 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR LenguajeLexer (RULES (RULE T__0 (BLOCK (ALT ';'))) (RULE T__1 (BLOCK (ALT '('))) (RULE T__2 (BLOCK (ALT ')'))) (RULE T__3 (BLOCK (ALT '='))) (RULE T__4 (BLOCK (ALT '['))) (RULE T__5 (BLOCK (ALT ','))) (RULE T__6 (BLOCK (ALT ']'))) (RULE T__7 (BLOCK (ALT '!'))) (RULE T__8 (BLOCK (ALT '^'))) (RULE T__9 (BLOCK (ALT 'raiz'))) (RULE T__10 (BLOCK (ALT '*'))) (RULE T__11 (BLOCK (ALT '/'))) (RULE T__12 (BLOCK (ALT '+'))) (RULE T__13 (BLOCK (ALT '-'))) (RULE T__14 (BLOCK (ALT '=='))) (RULE T__15 (BLOCK (ALT '!='))) (RULE T__16 (BLOCK (ALT '>'))) (RULE T__17 (BLOCK (ALT '<'))) (RULE T__18 (BLOCK (ALT '>='))) (RULE T__19 (BLOCK (ALT '<='))) (RULE T__20 (BLOCK (ALT '{'))) (RULE T__21 (BLOCK (ALT '}'))) (RULE IF (BLOCK (ALT 'si') (ALT 'Si') (ALT 'SI'))) (RULE ELSE (BLOCK (ALT 'entonces') (ALT 'Entonces') (ALT 'ENTONCES'))) (RULE WHILE (BLOCK (ALT 'mientras') (ALT 'Mientras') (ALT 'MIENTRAS') (ALT 'hasta') (ALT 'Hasta') (ALT 'HASTA'))) (RULE FOR (BLOCK (ALT 'para') (ALT 'Para') (ALT 'PARA'))) (RULE BOOL_OPERATOR (BLOCK (ALT 'and') (ALT 'or') (ALT 'xor'))) (RULE INTEGER (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9])))))) (RULE DOUBLE (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9]))) (SET 'e' 'E') (? (BLOCK (ALT [+-]))) (+ (BLOCK (ALT [0-9])))))) (RULE STRING (BLOCK (ALT (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET '"'))))) '"'))) (ALT (BLOCK (ALT '\'' (* (BLOCK (ALT (~ (SET '\''))))) '\''))))) (RULE BOOL (BLOCK (ALT 'true') (ALT 'false'))) (RULE NULL (BLOCK (ALT 'null'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE IDENTIFIER (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z0-9_]))))))))
2024-12-04 14:25:59:193 left-recursion LogManager.java:25 expression
    :   ( {} constant<tokenIndex=311>                           
        | IDENTIFIER<tokenIndex=318>                         
        | indexAccess<tokenIndex=325>                        
        | functionCall<tokenIndex=332>                       
        | '('<tokenIndex=339> expression<tokenIndex=341> ')'<tokenIndex=343>                 
        | '!'<tokenIndex=350> expression<tokenIndex=352,p=7> 
        )
        (
          {precpred(_ctx, 6)}?<p=6> powOp<tokenIndex=361> expression<tokenIndex=363,p=7>
                  | {precpred(_ctx, 5)}?<p=5> sqrtOp<tokenIndex=372> expression<tokenIndex=374,p=6>
                  | {precpred(_ctx, 4)}?<p=4> multOp<tokenIndex=383> expression<tokenIndex=385,p=5>
                  | {precpred(_ctx, 3)}?<p=3> addOp<tokenIndex=394> expression<tokenIndex=396,p=4>
                  | {precpred(_ctx, 2)}?<p=2> compareOp<tokenIndex=405> expression<tokenIndex=407,p=3>
                  | {precpred(_ctx, 1)}?<p=1> boolOp<tokenIndex=416> expression<tokenIndex=418,p=2>
        )*
    ;
2024-12-04 14:25:59:196 grammar LogManager.java:25 added: (RULE expression (BLOCK (ALT (BLOCK (ALT {} (constant (ELEMENT_OPTIONS (= tokenIndex 311)))) (ALT (IDENTIFIER (ELEMENT_OPTIONS (= tokenIndex 318)))) (ALT (indexAccess (ELEMENT_OPTIONS (= tokenIndex 325)))) (ALT (functionCall (ELEMENT_OPTIONS (= tokenIndex 332)))) (ALT ('(' (ELEMENT_OPTIONS (= tokenIndex 339))) (expression (ELEMENT_OPTIONS (= tokenIndex 341))) (')' (ELEMENT_OPTIONS (= tokenIndex 343)))) (ALT ('!' (ELEMENT_OPTIONS (= tokenIndex 350))) (expression (ELEMENT_OPTIONS (= tokenIndex 352) (= p 7))))) (* (BLOCK (ALT ({precpred(_ctx, 6)}? (ELEMENT_OPTIONS (= p 6))) (powOp (ELEMENT_OPTIONS (= tokenIndex 361))) (expression (ELEMENT_OPTIONS (= tokenIndex 363) (= p 7)))) (ALT ({precpred(_ctx, 5)}? (ELEMENT_OPTIONS (= p 5))) (sqrtOp (ELEMENT_OPTIONS (= tokenIndex 372))) (expression (ELEMENT_OPTIONS (= tokenIndex 374) (= p 6)))) (ALT ({precpred(_ctx, 4)}? (ELEMENT_OPTIONS (= p 4))) (multOp (ELEMENT_OPTIONS (= tokenIndex 383))) (expression (ELEMENT_OPTIONS (= tokenIndex 385) (= p 5)))) (ALT ({precpred(_ctx, 3)}? (ELEMENT_OPTIONS (= p 3))) (addOp (ELEMENT_OPTIONS (= tokenIndex 394))) (expression (ELEMENT_OPTIONS (= tokenIndex 396) (= p 4)))) (ALT ({precpred(_ctx, 2)}? (ELEMENT_OPTIONS (= p 2))) (compareOp (ELEMENT_OPTIONS (= tokenIndex 405))) (expression (ELEMENT_OPTIONS (= tokenIndex 407) (= p 3)))) (ALT ({precpred(_ctx, 1)}? (ELEMENT_OPTIONS (= p 1))) (boolOp (ELEMENT_OPTIONS (= tokenIndex 416))) (expression (ELEMENT_OPTIONS (= tokenIndex 418) (= p 2)))))))))
2024-12-04 14:25:59:197 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, IF=23, ELSE=24, WHILE=25, FOR=26, BOOL_OPERATOR=27, INTEGER=28, FLOAT=29, DOUBLE=30, STRING=31, BOOL=32, NULL=33, WS=34, IDENTIFIER=35}
2024-12-04 14:25:59:197 semantics LogManager.java:25 strings={';'=1, '('=2, ')'=3, '='=4, '['=5, ','=6, ']'=7, '!'=8, '^'=9, 'raiz'=10, '*'=11, '/'=12, '+'=13, '-'=14, '=='=15, '!='=16, '>'=17, '<'=18, '>='=19, '<='=20, '{'=21, '}'=22, 'null'=33}
2024-12-04 14:25:59:203 LL1 LogManager.java:25 
DECISION 0 in rule program
2024-12-04 14:25:59:203 LL1 LogManager.java:25 look=[{23, 25..26, 35}, <EOF>]
2024-12-04 14:25:59:204 LL1 LogManager.java:25 LL(1)? true
2024-12-04 14:25:59:204 LL1 LogManager.java:25 
DECISION 1 in rule line
2024-12-04 14:25:59:204 LL1 LogManager.java:25 look=[35, 23, 25, 26]
2024-12-04 14:25:59:204 LL1 LogManager.java:25 LL(1)? true
2024-12-04 14:25:59:204 LL1 LogManager.java:25 
DECISION 2 in rule statement
2024-12-04 14:25:59:204 LL1 LogManager.java:25 look=[35, 35, 35]
2024-12-04 14:25:59:204 LL1 LogManager.java:25 LL(1)? false
2024-12-04 14:25:59:204 LL1 LogManager.java:25 
DECISION 3 in rule ifBlock
2024-12-04 14:25:59:204 LL1 LogManager.java:25 look=[24, 24, {<EOF>, 22..23, 25..26, 35}]
2024-12-04 14:25:59:204 LL1 LogManager.java:25 LL(1)? false
2024-12-04 14:25:59:204 LL1 LogManager.java:25 
DECISION 4 in rule elseifBlock
2024-12-04 14:25:59:204 LL1 LogManager.java:25 look=[24, {<EOF>, 22..23, 25..26, 35}]
2024-12-04 14:25:59:204 LL1 LogManager.java:25 LL(1)? true
2024-12-04 14:25:59:204 LL1 LogManager.java:25 
DECISION 5 in rule elseBlock
2024-12-04 14:25:59:204 LL1 LogManager.java:25 look=[24, {<EOF>, 22..23, 25..26, 35}]
2024-12-04 14:25:59:204 LL1 LogManager.java:25 LL(1)? true
2024-12-04 14:25:59:204 LL1 LogManager.java:25 
DECISION 6 in rule forBlock
2024-12-04 14:25:59:204 LL1 LogManager.java:25 look=[{2, 8, 28..33, 35}, 1]
2024-12-04 14:25:59:204 LL1 LogManager.java:25 LL(1)? true
2024-12-04 14:25:59:204 LL1 LogManager.java:25 
DECISION 7 in rule matrixDeclaration
2024-12-04 14:25:59:204 LL1 LogManager.java:25 look=[6, 7]
2024-12-04 14:25:59:204 LL1 LogManager.java:25 LL(1)? true
2024-12-04 14:25:59:204 LL1 LogManager.java:25 
DECISION 8 in rule row
2024-12-04 14:25:59:204 LL1 LogManager.java:25 look=[6, 7]
2024-12-04 14:25:59:204 LL1 LogManager.java:25 LL(1)? true
2024-12-04 14:25:59:204 LL1 LogManager.java:25 
DECISION 9 in rule indexAccess
2024-12-04 14:25:59:204 LL1 LogManager.java:25 look=[5, null]
2024-12-04 14:25:59:204 LL1 LogManager.java:25 LL(1)? false
2024-12-04 14:25:59:204 LL1 LogManager.java:25 
DECISION 10 in rule functionCall
2024-12-04 14:25:59:204 LL1 LogManager.java:25 look=[6, 3]
2024-12-04 14:25:59:204 LL1 LogManager.java:25 LL(1)? true
2024-12-04 14:25:59:204 LL1 LogManager.java:25 
DECISION 11 in rule functionCall
2024-12-04 14:25:59:204 LL1 LogManager.java:25 look=[{2, 8, 28..33, 35}, 3]
2024-12-04 14:25:59:204 LL1 LogManager.java:25 LL(1)? true
2024-12-04 14:25:59:204 LL1 LogManager.java:25 
DECISION 12 in rule expression
2024-12-04 14:25:59:204 LL1 LogManager.java:25 look=[{28..33}, 35, 35, 35, 2, 8]
2024-12-04 14:25:59:204 LL1 LogManager.java:25 LL(1)? false
2024-12-04 14:25:59:204 LL1 LogManager.java:25 
DECISION 13 in rule expression
2024-12-04 14:25:59:204 LL1 LogManager.java:25 look=[null, null, null, null, null, null]
2024-12-04 14:25:59:204 LL1 LogManager.java:25 LL(1)? false
2024-12-04 14:25:59:204 LL1 LogManager.java:25 
DECISION 14 in rule expression
2024-12-04 14:25:59:205 LL1 LogManager.java:25 look=[null, null]
2024-12-04 14:25:59:205 LL1 LogManager.java:25 LL(1)? false
2024-12-04 14:25:59:205 LL1 LogManager.java:25 
DECISION 15 in rule block
2024-12-04 14:25:59:205 LL1 LogManager.java:25 look=[{23, 25..26, 35}, 22]
2024-12-04 14:25:59:205 LL1 LogManager.java:25 LL(1)? true
2024-12-04 14:25:59:221 action-translator LogManager.java:25 translate 
2024-12-04 14:25:59:221 action-translator LogManager.java:25 translate precpred(_ctx, 6)
2024-12-04 14:25:59:221 action-translator LogManager.java:25 translate precpred(_ctx, 5)
2024-12-04 14:25:59:221 action-translator LogManager.java:25 translate precpred(_ctx, 4)
2024-12-04 14:25:59:222 action-translator LogManager.java:25 translate precpred(_ctx, 3)
2024-12-04 14:25:59:222 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2024-12-04 14:25:59:222 action-translator LogManager.java:25 translate precpred(_ctx, 1)
2024-12-04 14:25:59:222 action-translator LogManager.java:25 translate precpred(_ctx, 6)
2024-12-04 14:25:59:222 action-translator LogManager.java:25 translate precpred(_ctx, 5)
2024-12-04 14:25:59:222 action-translator LogManager.java:25 translate precpred(_ctx, 4)
2024-12-04 14:25:59:222 action-translator LogManager.java:25 translate precpred(_ctx, 3)
2024-12-04 14:25:59:222 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2024-12-04 14:25:59:222 action-translator LogManager.java:25 translate precpred(_ctx, 1)
